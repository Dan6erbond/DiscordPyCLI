root:
  .gitignore: https://raw.githubusercontent.com/github/gitignore/master/Python.gitignore
  cogs:
    __init__.py: ""
    "{cog_file}.py": |
      from typing import TYPE_CHECKING

      import discord
      from discord.ext import commands

      if TYPE_CHECKING:
          from {bot_file} import {bot_name}

      class {cog_name}(commands.Cog):
          def __init__(self, bot: '{bot_name}'):
              self.bot = bot

          @commands.command()
          async def command(self, ctx: commands.Context):
              pass

      def setup(bot: '{bot_name}'):
          bot.add_cog({cog_name}(bot))
  cmds:
    __init__.py: ""
    help_cmd.py:
      template: https://raw.githubusercontent.com/GTAOnline-Mods/LesterCrestBot/master/cmds/help_command.py
      boilerplate: |
        import asyncio
        from inspect import Parameter
        from typing import List, Mapping, Optional

        import discord
        from discord.ext import commands


        class HelpCommand(commands.HelpCommand):

            def __init__(self, embed_color: discord.Colour = discord.Colour(0).from_rgb(64, 153, 130), **options):
                self._embed_color = embed_color
                super().__init__(**options)

            async def send_bot_help(self, mapping: Mapping[Optional[commands.Cog], List[commands.Command]]):
                print("Bot help:", mapping)
                return await super().send_bot_help(mapping)

            async def send_cog_help(self, cog: commands.Cog):
                print("Cog help:", cog)
                return await super().send_cog_help(cog)

            async def send_group_help(self, group):
                print("Group help:", group)
                return await super().send_group_help(group)

            async def send_command_help(self, command: commands.Command):
                print("Command help:", command)
                return await super().send_command_help(command)

            async def command_not_found(self, string):
                print("Command not found:", string)
                return super().command_not_found(string)

            async def subcommand_not_found(self, command, string):
                print("Subcommand not found:", command, string)
                return super().subcommand_not_found(command, string)

            async def on_help_command_error(self, ctx, error):
                print("Help command error:", ctx, error)
                return await super().on_help_command_error(ctx, error)

            async def send_error_message(self, error):
                if error:
                    print(error)
  "{bot_file}.py":
    skeleton: |
      {imports}

      {config}

      {bot}

      {cogs}

      {main}
    bot: |
      class {bot_name}({bases}):
          def __init__(self, **options):
              super().__init__(cmd_prefix, description=description{help_cmd}, **options)
              {banhammer_setup}
          async def on_ready(self):
              print(f"{{self.user.name}} is running.")
              {banhammer_ready}
          async def on_command_error(self, ctx: commands.Context, error: Exception):
              if isinstance(error, discord.ext.commands.errors.CommandNotFound):
                  pass
              else:
                  await ctx.message.channel.send(error)
                  traceback.print_tb(error.__traceback__)

          @property
          def embed(self):
              embed = discord.Embed(
                  colour=discord.Colour(0).from_rgb(0, 0, 0)
              )
              embed.set_footer(text=f"{bot_name}", icon_url=self.user.avatar_url)
              embed.timestamp = datetime.utcnow()

              return embed{banhammer_events}
    bot-basic: |
      bot = commands.Bot(cmd_prefix, description=description{help_cmd})
      {banhammer_setup}
      @bot.event
      async def on_ready():
          print(f"{{bot.user.name}} is running.")
          {banhammer_ready}
      @bot.event
      async def on_command_error(self, ctx: commands.Context, error: Exception):
          if isinstance(error, discord.ext.commands.errors.CommandNotFound):
              pass
          else:
              await ctx.message.channel.send(error)
              traceback.print_tb(error.__traceback__){banhammer_events}
    main: |
      if __name__ == "__main__":
          bot = {bot_name}()

          for cog in cogs:
              bot.load_extension(cog)
              print(f"Cog: {{cog}} loaded.")

          bot.run(token)
    main-basic: |
      if __name__ == "__main__":
          for cog in cogs:
              bot.load_extension(cog)
              print(f"Cog: {{cog}} loaded.")

          bot.run(token)
    config:
      discord.yaml: |
        yaml = YAML(typ="safe")
        yaml.indent(mapping=2, sequence=4, offset=2)

        with open("discord.yaml") as f:
            config = yaml.load(f)

        token = config["bot"]["token"]

        cmd_prefix = config["bot"]["cmd_prefix"]
        description = config["bot"]["description"]
      discord.ini: |
        config = configparser.ConfigParser()
        config.read("discord.ini")
        token = config["{bot_name}"]["token"]

        cmd_prefix = {cmd_prefix}
        description = {description}
      config.py: |
        token = config["token"]
        cmd_prefix = config["cmd_prefix"]
        description = config["description"]
      .env: |
        load_dotenv()
        cmd_prefix = os.getenv("PREFIX")
        token = os.getenv("TOKEN")
  config:
    discord.ini: |
      [{bot_name}]
      token={token}
      client_id={client_id}
    config.py: |
      config = {
        "cmd_prefix": "{cmd_prefix}",
        "description": "{description}",
        "client_id": "{client_id}",
        "token": "{token}"
      }
    .env: |
      TOKEN={token}
      CLIENT_ID={client_id}
      PREFIX={cmd_prefix}
  banhammer:
    setup: |+
      reddit = apraw.Reddit(client_id=CLIENT_ID, client_secret=CLIENT_SECRET,
                            username=USERNAME, password=PASSWORD, user_agent=USER_AGENT)
      \t\tBanhammer.__init__(self, reddit, bot=self)\n
    setup-basic: |
      \n
      reddit = apraw.Reddit(client_id=CLIENT_ID, client_secret=CLIENT_SECRET,
                            username=USERNAME, password=PASSWORD, user_agent=USER_AGENT)
      bh = banhammer.Banhammer(reddit, bot=bot)
      \n
    events: |
      \n
      \t@EventHandler.new()
      \t@EventHandler.comments()
      \tasync def handle_new(self, p: RedditItem):
          \tmsg = await self.get_channel(CHANNEL_ID).send(embed=await p.get_embed(embed_template=self.embed))
          \tawait p.add_reactions(msg)
    events-basic: |
      \n
      @bh.new()
      async def handle_new(p: RedditItem):
          msg = await bot.get_channel(CHANNEL_ID).send(embed=await p.get_embed())
          await p.add_reactions(msg)
    ready: |
      await self.add_subreddits(SUBNAME)
      \t\tBanhammer.start(self)\n
    ready-basic: |
      \tawait bh.add_subreddits(sub)
      \tbh.run()\n